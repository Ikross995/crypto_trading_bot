#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API
"""

import os
import sys
from dotenv import load_dotenv

def diagnose_binance_connection():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Binance API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BINANCE API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env.testnet
    env_file = ".env.testnet"
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {env_file}")
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    api_key = os.getenv('BINANCE_API_KEY', '')
    secret_key = os.getenv('BINANCE_SECRET_KEY', '')
    testnet = os.getenv('BINANCE_TESTNET', 'false')
    enable_real = os.getenv('ENABLE_REAL_API', 'false')
    
    print(f"BINANCE_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ü—É—Å—Ç–æ–π'} ({len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"BINANCE_SECRET_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if secret_key else '‚ùå –ü—É—Å—Ç–æ–π'} ({len(secret_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"BINANCE_TESTNET: {testnet} {'‚úÖ' if testnet.lower() == 'true' else '‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å true'}")
    print(f"ENABLE_REAL_API: {enable_real} {'‚úÖ' if enable_real.lower() == 'true' else '‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å true'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
    print("\nüîë –ê–ù–ê–õ–ò–ó API –ö–õ–Æ–ß–ï–ô:")
    if api_key:
        if len(api_key) == 64:
            print("‚úÖ API Key: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (64 —Å–∏–º–≤–æ–ª–∞)")
        else:
            print(f"‚ùå API Key: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ({len(api_key)} –≤–º–µ—Å—Ç–æ 64)")
            
        if api_key.isalnum():
            print("‚úÖ API Key: –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
        else:
            print("‚ùå API Key: –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
        if ' ' in api_key:
            print("‚ùå API Key: –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã!")
        else:
            print("‚úÖ API Key: –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")
    
    if secret_key:
        if len(secret_key) == 64:
            print("‚úÖ Secret Key: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (64 —Å–∏–º–≤–æ–ª–∞)")
        else:
            print(f"‚ùå Secret Key: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ({len(secret_key)} –≤–º–µ—Å—Ç–æ 64)")
            
        if ' ' in secret_key:
            print("‚ùå Secret Key: –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã!")
        else:
            print("‚úÖ Secret Key: –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\nüåê –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    try:
        from binance.client import Client
        from binance.exceptions import BinanceAPIException
        
        if not api_key or not secret_key:
            print("‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        print("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance Testnet...")
        
        client = Client(
            api_key=api_key,
            api_secret=secret_key,
            testnet=True  # Testnet
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        account_info = client.get_account()
        print("‚úÖ –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö BINANCE TESTNET!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        for balance in account_info['balances']:
            if balance['asset'] == 'USDT' and float(balance['free']) > 0:
                print(f"üí∞ Testnet –±–∞–ª–∞–Ω—Å: {balance['free']} USDT")
                break
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price = client.get_symbol_ticker(symbol="BTCUSDT")
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTCUSDT: {price['price']}")
        
        print("\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ.")
        return True
        
    except BinanceAPIException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Binance API: {e}")
        if e.code == -2015:
            print("üí° –†–ï–®–ï–ù–ò–ï: API –∫–ª—é—á–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–ª—é—á–∏ –æ—Ç testnet.binance.vision")
            print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–Ω—ã")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (permissions)")
        elif e.code == -1021:
            print("üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏")
            print("   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
        
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å python-binance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –†–ï–®–ï–ù–ò–ï: pip install python-binance")
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
    return False

def show_testnet_guide():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é Testnet –∫–ª—é—á–µ–π"""
    print("\n" + "="*50)
    print("üìù –ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–´–ï TESTNET API –ö–õ–Æ–ß–ò:")
    print("="*50)
    print()
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: https://testnet.binance.vision/")
    print("2. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ GitHub –∞–∫–∫–∞—É–Ω—Ç")  
    print("3. –ù–∞–∂–º–∏—Ç–µ 'Generate HMAC_SHA256 Key'")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API Key –∏ Secret Key")
    print("5. –û–±–Ω–æ–≤–∏—Ç–µ .env.testnet —Ñ–∞–π–ª:")
    print()
    print("BINANCE_API_KEY=–≤–∞—à_64_—Å–∏–º–≤–æ–ª—å–Ω—ã–π_api_key")
    print("BINANCE_SECRET_KEY=–≤–∞—à_64_—Å–∏–º–≤–æ–ª—å–Ω—ã–π_secret_key")
    print("BINANCE_TESTNET=true")
    print("ENABLE_REAL_API=true")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û testnet –∫–ª—é—á–∏!")
    print("    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏—Ä–∂–∏ binance.com")

if __name__ == "__main__":
    success = diagnose_binance_connection()
    if not success:
        show_testnet_guide()