import os
def _safe_pos_summary(pm):
    try:
        return pm.get_position_summary()
    except Exception:
        return {}

"""
Paper trading runner for AI Trading Bot.

Simulates trading with real market data but fake money.
"""

import asyncio
import logging
from typing import List, Any
from decimal import Decimal
from runner.execution import TradeExecutor

from core.config import Config, get_config
from exchange.client import MockBinanceClient, BinanceMarketDataClient
from exchange.positions import PositionManager
from strategy.signals import SignalGenerator
from core.constants import SignalType, PositionSide


class PaperTradingEngine:
    """Paper trading engine for simulated trading."""
    
    def __init__(self, config: Config):
        """Initialize paper trading engine."""
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # Components
        self.trading_client = None
        self.market_data_client: BinanceMarketDataClient = None
        self.position_manager: PositionManager = None
        self.signal_generator: SignalGenerator = None
        self.trade_executor = TradeExecutor()
        
        # State
        self.running = False
        self._last_prices: dict = {}
        
    def start(self) -> None:
        """Start the paper trading engine."""
        self.logger.info("Starting paper trading engine...")
        self._initialize_components()
        self.running = True
        self.logger.info("Paper trading engine started")
        
    def stop(self) -> None:
        """Stop the paper trading engine."""
        self.logger.info("Stopping paper trading engine...")
        self.running = False
        self.logger.info("Paper trading engine stopped")
        
    def _initialize_components(self) -> None:
        """Initialize all trading components."""
        self.logger.info("Initializing paper trading components...")
        
        # Initialize integrated client (real API or mock)
        from exchange.client import IntegratedBinanceClient
        self.trading_client = IntegratedBinanceClient(self.config)
        
        # For backward compatibility, also expose as mock_client
        self.mock_client = self.trading_client
        
        # Initialize market data client for real prices
        self.market_data_client = BinanceMarketDataClient(self.config)
        self.market_data_client.initialize()
        
        # Initialize position manager
        self.position_manager = PositionManager(self.config)
        
        # Initialize signal generator  
        self.signal_generator = SignalGenerator(self.config)
        
        # Initialize components that have an initialize method
        components = [
            self.position_manager,
            self.signal_generator,
        ]
        
        for component in components:
            component_name = component.__class__.__name__
            if hasattr(component, 'initialize'):
                self.logger.info(f"Initializing {component_name}")
                component.initialize()
                self.logger.info(f"{component_name} initialized successfully")
            else:
                self.logger.exception(f"{component_name} {component.__class__} does not have initialize method!")
                raise RuntimeError(f"Component {component_name} is missing initialize method")
        
        self.logger.info("All components initialized successfully")
        
    async def run_trading_loop(self) -> None:
        """Main trading loop for paper trading with real market data."""
        self.logger.info("Starting paper trading loop")
        
        try:
            iteration = 0
            while self.running:
                iteration += 1
                
                # Process each symbol
                for symbol in self.config.symbols:
                    try:
                        await self._process_symbol(symbol, iteration)
                    except Exception as e:
                        self.logger.exception(f"Error processing {symbol}: {e}")
                        continue
                
                # Wait before next iteration
                await asyncio.sleep(10)  # Check every 10 seconds
                
                # Log status every 30 iterations (5 minutes)
                if iteration % 30 == 0:
                    self._log_status()
                
        except Exception as e:
            self.logger.exception(f"Error in trading loop: {e}")
            raise
        finally:
            self.logger.info("Trading loop ended")
    
    async def _process_symbol(self, symbol: str, iteration: int) -> None:
        """Process trading logic for a single symbol."""
        # Get current market price
        current_price = self.market_data_client.get_current_price(symbol)
        if not current_price:
            self.logger.warning(f"Could not get price for {symbol}")
            return
            
        # Update position manager with current price
        self.position_manager.update_market_price(symbol, current_price)
        self._last_prices[symbol] = current_price
        
        if os.getenv("ORDER_BRIDGE_ENABLE", "false").lower() == "true":
            if sig and isinstance(sig, dict) and sig.get("signal_type") in ("BUY","SELL"):
                res = await asyncio.to_thread(
                    self.trade_executor.handle_signal,
                    symbol,
                    sig,
                    working_type=getattr(self.config, "exit_working_type", "MARK_PRICE")
                )
                self.logger.info("EXECUTOR RESULT %s: %s", symbol, res)
                # при успешной обработке можно early return из итерации, чтобы не вызывать старый путь
                return

        # Get market data for signal generation every 5th iteration
        if iteration % 5 == 0:
            market_data = self.market_data_client.get_klines(
                symbol=symbol, 
                interval=self.config.timeframe, 
                limit=50
            )
            
            if market_data:
                # Generate trading signal
                signal = self.signal_generator.generate_signal(market_data)
                # ORDER BRIDGE: executor path (clean reinstall)
                try:
                    _bridge_enabled = (getattr(self.config, "order_bridge_enable", False) or os.getenv("ORDER_BRIDGE_ENABLE","false").lower()=="true")
                    if _bridge_enabled and signal and isinstance(signal, dict) and signal.get("signal_type") in ("BUY","SELL"):
                        if getattr(self, "trade_executor", None) and getattr(self.trade_executor, "client", None) is None and getattr(self, "client", None):
                            self.trade_executor.client = self.client
                        res = await asyncio.to_thread(
                            self.trade_executor.handle_signal,
                            symbol,
                            signal,
                            working_type=getattr(self.config, "exit_working_type", "MARK_PRICE"),
                        )
                        self.logger.info("EXECUTOR RESULT %s: %s", symbol, res)
                        # disable legacy path in this iteration
                        signal = None
                except Exception as _ex:
                    self.logger.warning("ORDER BRIDGE error: %s", _ex)

                    self.logger.warning("ORDER BRIDGE error: %s", _ex)

                    self.logger.warning("ORDER BRIDGE error: %s", _ex)
                
                if signal:
                    self.logger.info(f"📊 Signal: {signal.signal_type.value} {symbol} "
                                   f"@ {current_price} (strength: {signal.strength:.2f})")
                    
                    # Execute trade based on signal (simulated)
                    await self._execute_signal(symbol, signal, current_price)
    
    async def _execute_signal(self, symbol: str, signal, current_price: Decimal) -> None:
        """Execute trading signal (simulated)."""
        try:
            # Calculate position size (simple fixed amount for demo)
            balance = self.mock_client.get_balance()
            risk_amount = balance * Decimal(str(self.config.risk_per_trade))
            quantity = risk_amount / current_price
            
            # Check if we have existing position
            current_position = self.position_manager.get_position(symbol)
            
            if signal.signal_type == SignalType.BUY:
                if not current_position or current_position.side != PositionSide.LONG:
                    # Place buy order
                    self.logger.info(f"🟢 BUY {quantity:.6f} {symbol} @ {current_price}")
                    
                    # Update position manager
                    self.position_manager.update_position(
                        symbol=symbol,
                        side=PositionSide.LONG,
                        size=quantity,
                        price=current_price
                    )
                    
            elif signal.signal_type == SignalType.SELL:
                if current_position and current_position.side == PositionSide.LONG:
                    # Close long position
                    self.logger.info(f"🔴 SELL {current_position.size:.6f} {symbol} @ {current_price}")
                    
                    # Close position
                    pnl = self.position_manager.close_position(symbol, current_price)
                    if pnl:
                        self.logger.info(f"💰 Closed {symbol} position with P&L: {pnl:.2f} USDT")
                        
        except Exception as e:
            self.logger.exception(f"Error executing signal: {e}")
    
    def _log_status(self) -> None:
        """Log current status of the trading engine."""
        try:
            balance = self.mock_client.get_balance()
            position_summary = _safe_pos_summary(self.position_manager)
            
            self.logger.info("=" * 60)
            self.logger.info("📈 PAPER TRADING STATUS")
            self.logger.info(f"💰 Balance: {balance:.2f} USDT")
            self.logger.info(f"📊 Positions: {position_summary.get('total_positions', 0)}")
            self.logger.info(f"💹 Unrealized P&L: {position_summary.get('total_unrealized_pnl', 0):.2f} USDT")
            self.logger.info(f"💸 Daily P&L: {position_summary.get('daily_pnl', 0):.2f} USDT")
            
            # Log current prices
            if self._last_prices:
                self.logger.info("📈 Current Prices:")
                for symbol, price in self._last_prices.items():
                    self.logger.info(f"  {symbol}: ${price:.4f}")
                    
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.exception(f"Error logging status: {e}")


async def run_paper_trading(config: Config = None) -> None:
    """Main entry point for paper trading."""
    if config is None:
        config = get_config()
        
    logger = logging.getLogger(__name__)
    logger.info("Starting paper trading session")
    
    # Initialize trading engine
    engine = PaperTradingEngine(config)
    
    try:
        # Start the engine
        engine.start()
        
        # Run the trading loop
        await engine.run_trading_loop()
        
    except KeyboardInterrupt:
        logger.info("Shutdown requested by user")
    except Exception as e:
        logger.error(f"Paper trading session failed: {e}")
        raise
    finally:
        # Stop the engine
        try:
            engine.stop()
        except Exception as e:
            logger.error(f"Error stopping engine: {e}")
        logger.info("Paper trading session ended")
